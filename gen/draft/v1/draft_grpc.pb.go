// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: draft/v1/draft.proto

package draftv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DraftService_CreateDraftBucket_FullMethodName = "/draft.v1.DraftService/CreateDraftBucket"
	DraftService_GetUploadURL_FullMethodName      = "/draft.v1.DraftService/GetUploadURL"
	DraftService_GetDownloadURL_FullMethodName    = "/draft.v1.DraftService/GetDownloadURL"
	DraftService_ConfirmUpload_FullMethodName     = "/draft.v1.DraftService/ConfirmUpload"
)

// DraftServiceClient is the client API for DraftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DraftService provides methods for managing draft uploads
type DraftServiceClient interface {
	// CreateDraftBucket creates the necessary buckets for draft operations
	CreateDraftBucket(ctx context.Context, in *CreateDraftBucketRequest, opts ...grpc.CallOption) (*CreateDraftBucketResponse, error)
	// GetUploadURL generates a presigned URL for uploading files to the draft bucket
	GetUploadURL(ctx context.Context, in *GetUploadURLRequest, opts ...grpc.CallOption) (*GetUploadURLResponse, error)
	// GetDownloadURL generates a presigned URL for downloading files from the main bucket
	GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error)
	// ConfirmUpload moves a file from draft bucket to main bucket
	ConfirmUpload(ctx context.Context, in *ConfirmUploadRequest, opts ...grpc.CallOption) (*ConfirmUploadResponse, error)
}

type draftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDraftServiceClient(cc grpc.ClientConnInterface) DraftServiceClient {
	return &draftServiceClient{cc}
}

func (c *draftServiceClient) CreateDraftBucket(ctx context.Context, in *CreateDraftBucketRequest, opts ...grpc.CallOption) (*CreateDraftBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDraftBucketResponse)
	err := c.cc.Invoke(ctx, DraftService_CreateDraftBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftServiceClient) GetUploadURL(ctx context.Context, in *GetUploadURLRequest, opts ...grpc.CallOption) (*GetUploadURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUploadURLResponse)
	err := c.cc.Invoke(ctx, DraftService_GetUploadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftServiceClient) GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDownloadURLResponse)
	err := c.cc.Invoke(ctx, DraftService_GetDownloadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *draftServiceClient) ConfirmUpload(ctx context.Context, in *ConfirmUploadRequest, opts ...grpc.CallOption) (*ConfirmUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmUploadResponse)
	err := c.cc.Invoke(ctx, DraftService_ConfirmUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DraftServiceServer is the server API for DraftService service.
// All implementations must embed UnimplementedDraftServiceServer
// for forward compatibility
//
// DraftService provides methods for managing draft uploads
type DraftServiceServer interface {
	// CreateDraftBucket creates the necessary buckets for draft operations
	CreateDraftBucket(context.Context, *CreateDraftBucketRequest) (*CreateDraftBucketResponse, error)
	// GetUploadURL generates a presigned URL for uploading files to the draft bucket
	GetUploadURL(context.Context, *GetUploadURLRequest) (*GetUploadURLResponse, error)
	// GetDownloadURL generates a presigned URL for downloading files from the main bucket
	GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error)
	// ConfirmUpload moves a file from draft bucket to main bucket
	ConfirmUpload(context.Context, *ConfirmUploadRequest) (*ConfirmUploadResponse, error)
	mustEmbedUnimplementedDraftServiceServer()
}

// UnimplementedDraftServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDraftServiceServer struct {
}

func (UnimplementedDraftServiceServer) CreateDraftBucket(context.Context, *CreateDraftBucketRequest) (*CreateDraftBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDraftBucket not implemented")
}
func (UnimplementedDraftServiceServer) GetUploadURL(context.Context, *GetUploadURLRequest) (*GetUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadURL not implemented")
}
func (UnimplementedDraftServiceServer) GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadURL not implemented")
}
func (UnimplementedDraftServiceServer) ConfirmUpload(context.Context, *ConfirmUploadRequest) (*ConfirmUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmUpload not implemented")
}
func (UnimplementedDraftServiceServer) mustEmbedUnimplementedDraftServiceServer() {}

// UnsafeDraftServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DraftServiceServer will
// result in compilation errors.
type UnsafeDraftServiceServer interface {
	mustEmbedUnimplementedDraftServiceServer()
}

func RegisterDraftServiceServer(s grpc.ServiceRegistrar, srv DraftServiceServer) {
	s.RegisterService(&DraftService_ServiceDesc, srv)
}

func _DraftService_CreateDraftBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDraftBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftServiceServer).CreateDraftBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DraftService_CreateDraftBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftServiceServer).CreateDraftBucket(ctx, req.(*CreateDraftBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DraftService_GetUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftServiceServer).GetUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DraftService_GetUploadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftServiceServer).GetUploadURL(ctx, req.(*GetUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DraftService_GetDownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftServiceServer).GetDownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DraftService_GetDownloadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftServiceServer).GetDownloadURL(ctx, req.(*GetDownloadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DraftService_ConfirmUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DraftServiceServer).ConfirmUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DraftService_ConfirmUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DraftServiceServer).ConfirmUpload(ctx, req.(*ConfirmUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DraftService_ServiceDesc is the grpc.ServiceDesc for DraftService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DraftService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "draft.v1.DraftService",
	HandlerType: (*DraftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDraftBucket",
			Handler:    _DraftService_CreateDraftBucket_Handler,
		},
		{
			MethodName: "GetUploadURL",
			Handler:    _DraftService_GetUploadURL_Handler,
		},
		{
			MethodName: "GetDownloadURL",
			Handler:    _DraftService_GetDownloadURL_Handler,
		},
		{
			MethodName: "ConfirmUpload",
			Handler:    _DraftService_ConfirmUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "draft/v1/draft.proto",
}
